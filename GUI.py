# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ezscrap.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from tracemalloc import start
from PyQt5 import QtCore, QtGui, QtWidgets
from datetime import date
from spider import *


class Ui_EZ_Scrap(object):
    def setupUi(self, EZ_Scrap):
        font = QtGui.QFont()
        font.setPointSize(16)
        EZ_Scrap.setObjectName("EZ_Scrap")
        EZ_Scrap.resize(1241, 760)
        self.centralwidget = QtWidgets.QWidget(EZ_Scrap)
        self.centralwidget.setObjectName("centralwidget")
        self.search_label = QtWidgets.QLabel(self.centralwidget)
        self.search_label.setGeometry(QtCore.QRect(20, 10, 101, 41))
        self.search_label.setFont(font)
        self.search_label.setObjectName("search_label")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(470, 20, 651, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.search_bt = QtWidgets.QPushButton(self.centralwidget)
        self.search_bt.setGeometry(QtCore.QRect(1140, 10, 81, 41))
        self.search_bt.setFont(font)
        self.search_bt.setObjectName("search_bt")
        self.search_bt.clicked.connect(self.search_tweet)
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(110, 20, 81, 22))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.table = QtWidgets.QTableWidget(self.centralwidget)
        self.table.setGeometry(QtCore.QRect(220, 130, 1011, 621))
        self.table.setObjectName("tableView")
        self.start_date = QtWidgets.QDateEdit(self.centralwidget)
        self.start_date.setGeometry(QtCore.QRect(330, 20, 110, 22))
        self.start_date.setObjectName("start_date")
        self.start_date.setDate(date.today())
        self.end_date = QtWidgets.QDateEdit(self.centralwidget)
        self.end_date.setGeometry(QtCore.QRect(330, 60, 110, 22))
        self.end_date.setObjectName("end_date")
        self.end_date.setDate(date.today() - timedelta(days=7))
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(220, 20, 101, 21))
        self.label.setFont(font)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(220, 60, 91, 20))
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setGeometry(QtCore.QRect(10, 190, 201, 301))
        self.listWidget.setObjectName("listWidget")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(10, 140, 141, 41))
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        EZ_Scrap.setCentralWidget(self.centralwidget)

        self.retranslateUi(EZ_Scrap)
        QtCore.QMetaObject.connectSlotsByName(EZ_Scrap)

        self.update_search_word()
        self.tw_crawler = TwitterCrawler()

        self.confirm = None

    def retranslateUi(self, EZ_Scrap):
        _translate = QtCore.QCoreApplication.translate
        EZ_Scrap.setWindowTitle(_translate("EZ_Scrap", "Ez_Scrap"))
        self.search_label.setText(_translate("EZ_Scrap", "Search"))
        self.search_bt.setText(_translate("EZ_Scrap", "Search"))
        self.comboBox.setItemText(0, _translate("EZ_Scrap", "Twitter"))
        self.comboBox.setItemText(1, _translate("EZ_Scrap", "Web"))
        self.label.setText(_translate("EZ_Scrap", "Start Date"))
        self.label_2.setText(_translate("EZ_Scrap", "End Date"))
        self.label_3.setText(_translate("EZ_Scrap", "Search Word"))

    def confirm_scrap_popup(self):
        popup = QtWidgets.QMessageBox()
        popup.setWindowTitle("Confirm scrap")
        popup.setText("No keyword in database do you want to scrap?")
        popup.setIcon(QtWidgets.QMessageBox.Question)
        popup.setStandardButtons(QtWidgets.QMessageBox.Ok|QtWidgets.QMessageBox.Cancel)
        popup.buttonClicked.connect(self.popup_button)
        x = popup.exec_()

    def confirm_date_scrap_popup(self,start_day,end_day):
        popup = QtWidgets.QMessageBox()
        popup.setWindowTitle("Confirm scrap")
        popup.setText(f"This keyword have no data between {start_day} - {end_day}?")
        popup.setIcon(QtWidgets.QMessageBox.Question)
        popup.setStandardButtons(QtWidgets.QMessageBox.Ok|QtWidgets.QMessageBox.Cancel)
        popup.buttonClicked.connect(self.popup_button)
        x = popup.exec_()
    
    def popup_button(self , i):
        if i.text() == "OK":
            self.confirm = True
        else:
            self.confirm = False
    
    def update_search_word(self):
        self.listWidget.clear()
        self.search_word = os.listdir("./data/tweets")
        for word in self.search_word:
            self.listWidget.addItem(word)

    def search_tweet(self):
        start_day = self.start_date.date().toPyDate() 
        end_day = self.end_date.date().toPyDate()
        keyword = self.lineEdit.text()

        if keyword not in self.search_word:
            self.confirm_scrap_popup()
        else:
            while start_day >= end_day:
                if start_day.strftime('%Y-%m-%d') not in self.tw_crawler.metadata['twitter-keyword'][keyword]['date']:
                    self.confirm_date_scrap_popup(start_day,end_day)
                    break
                start_day -= timedelta(1)
        if self.confirm != None:
            if self.confirm:
                self.tw_crawler.search_tweets(keyword,start_day,end_day)
                self.update_search_word()
        self.get_tweets()

    
    def set_grid_table(self,data):
        self.table.setRowCount(data.shape[0])
        self.table.setColumnCount(data.shape[1])
        self.table.setHorizontalHeaderLabels(data.columns)

        for row in data.iterrows():
            values = row[1]
            for col_index,value in enumerate(values):
                tableItem = QtWidgets.QTableWidgetItem(str(value))
                self.table.setItem(row[0],col_index,tableItem)
        self.table.setColumnWidth(3,120)
        self.table.setColumnWidth(4,1000)
        self.table.setColumnWidth(8,340)

    def get_tweets(self):
        start_day = self.start_date.date().toPyDate() 
        end_day = self.end_date.date().toPyDate()

        keyword = self.lineEdit.text()
        file_list = os.listdir(f"./data/tweets/{keyword}")
        df_list = []
        while start_day >= end_day:
            day = date.strftime(start_day,'%Y-%m-%d')
            if f"{day}.xlsx" in file_list:
                df = pd.read_excel(f"./data/tweets/{keyword}/{day}.xlsx",engine="openpyxl")
                df_list.append(df)
            start_day -= timedelta(1)
        tweets = pd.concat(df_list, ignore_index=True)
        tweets = tweets.sort_values("post date")
        self.set_grid_table(tweets)
    

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    EZ_Scrap = QtWidgets.QMainWindow()
    ui = Ui_EZ_Scrap()
    ui.setupUi(EZ_Scrap)
    EZ_Scrap.show()
    sys.exit(app.exec_())
